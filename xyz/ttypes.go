// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package xyz

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Website
//  - NotificationURL
//  - Active
//  - Name
//  - URL
//  - BankMid
//  - NotificationEmail
//  - Industry
type Merchant struct {
	ID                string `thrift:"id,1" json:"id"`
	Website           string `thrift:"website,2" json:"website"`
	NotificationURL   string `thrift:"notification_url,3" json:"notification_url"`
	Active            bool   `thrift:"active,4" json:"active"`
	Name              string `thrift:"name,5" json:"name"`
	URL               string `thrift:"url,6" json:"url"`
	BankMid           string `thrift:"bank_mid,7" json:"bank_mid"`
	NotificationEmail string `thrift:"notification_email,8" json:"notification_email"`
	Industry          string `thrift:"industry,9" json:"industry"`
}

func NewMerchant() *Merchant {
	return &Merchant{}
}

func (p *Merchant) GetID() string {
	return p.ID
}

func (p *Merchant) GetWebsite() string {
	return p.Website
}

func (p *Merchant) GetNotificationURL() string {
	return p.NotificationURL
}

func (p *Merchant) GetActive() bool {
	return p.Active
}

func (p *Merchant) GetName() string {
	return p.Name
}

func (p *Merchant) GetURL() string {
	return p.URL
}

func (p *Merchant) GetBankMid() string {
	return p.BankMid
}

func (p *Merchant) GetNotificationEmail() string {
	return p.NotificationEmail
}

func (p *Merchant) GetIndustry() string {
	return p.Industry
}
func (p *Merchant) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Merchant) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Merchant) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Website = v
	}
	return nil
}

func (p *Merchant) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NotificationURL = v
	}
	return nil
}

func (p *Merchant) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Active = v
	}
	return nil
}

func (p *Merchant) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *Merchant) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *Merchant) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BankMid = v
	}
	return nil
}

func (p *Merchant) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.NotificationEmail = v
	}
	return nil
}

func (p *Merchant) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Industry = v
	}
	return nil
}

func (p *Merchant) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Merchant"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Merchant) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Merchant) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("website", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:website: ", p), err)
	}
	if err := oprot.WriteString(string(p.Website)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.website (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:website: ", p), err)
	}
	return err
}

func (p *Merchant) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notification_url", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notification_url: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notification_url (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notification_url: ", p), err)
	}
	return err
}

func (p *Merchant) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("active", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:active: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Active)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.active (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:active: ", p), err)
	}
	return err
}

func (p *Merchant) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:name: ", p), err)
	}
	return err
}

func (p *Merchant) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:url: ", p), err)
	}
	return err
}

func (p *Merchant) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bank_mid", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:bank_mid: ", p), err)
	}
	if err := oprot.WriteString(string(p.BankMid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bank_mid (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:bank_mid: ", p), err)
	}
	return err
}

func (p *Merchant) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("notification_email", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:notification_email: ", p), err)
	}
	if err := oprot.WriteString(string(p.NotificationEmail)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.notification_email (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:notification_email: ", p), err)
	}
	return err
}

func (p *Merchant) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("industry", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:industry: ", p), err)
	}
	if err := oprot.WriteString(string(p.Industry)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.industry (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:industry: ", p), err)
	}
	return err
}

func (p *Merchant) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Merchant(%+v)", *p)
}

// Attributes:
//  - ID
//  - TransactionTime
//  - MerchantID
//  - BankMid
//  - GrossAmount
//  - CustomerName
//  - CustomerEmail
//  - Status
type Transaction struct {
	ID              string  `thrift:"id,1" json:"id"`
	TransactionTime *string `thrift:"transaction_time,2" json:"transaction_time,omitempty"`
	MerchantID      *string `thrift:"merchant_id,3" json:"merchant_id,omitempty"`
	BankMid         *string `thrift:"bank_mid,4" json:"bank_mid,omitempty"`
	GrossAmount     *int32  `thrift:"gross_amount,5" json:"gross_amount,omitempty"`
	CustomerName    *string `thrift:"customer_name,6" json:"customer_name,omitempty"`
	CustomerEmail   *string `thrift:"customer_email,7" json:"customer_email,omitempty"`
	Status          *string `thrift:"status,8" json:"status,omitempty"`
}

func NewTransaction() *Transaction {
	return &Transaction{}
}

func (p *Transaction) GetID() string {
	return p.ID
}

var Transaction_TransactionTime_DEFAULT string

func (p *Transaction) GetTransactionTime() string {
	if !p.IsSetTransactionTime() {
		return Transaction_TransactionTime_DEFAULT
	}
	return *p.TransactionTime
}

var Transaction_MerchantID_DEFAULT string

func (p *Transaction) GetMerchantID() string {
	if !p.IsSetMerchantID() {
		return Transaction_MerchantID_DEFAULT
	}
	return *p.MerchantID
}

var Transaction_BankMid_DEFAULT string

func (p *Transaction) GetBankMid() string {
	if !p.IsSetBankMid() {
		return Transaction_BankMid_DEFAULT
	}
	return *p.BankMid
}

var Transaction_GrossAmount_DEFAULT int32

func (p *Transaction) GetGrossAmount() int32 {
	if !p.IsSetGrossAmount() {
		return Transaction_GrossAmount_DEFAULT
	}
	return *p.GrossAmount
}

var Transaction_CustomerName_DEFAULT string

func (p *Transaction) GetCustomerName() string {
	if !p.IsSetCustomerName() {
		return Transaction_CustomerName_DEFAULT
	}
	return *p.CustomerName
}

var Transaction_CustomerEmail_DEFAULT string

func (p *Transaction) GetCustomerEmail() string {
	if !p.IsSetCustomerEmail() {
		return Transaction_CustomerEmail_DEFAULT
	}
	return *p.CustomerEmail
}

var Transaction_Status_DEFAULT string

func (p *Transaction) GetStatus() string {
	if !p.IsSetStatus() {
		return Transaction_Status_DEFAULT
	}
	return *p.Status
}
func (p *Transaction) IsSetTransactionTime() bool {
	return p.TransactionTime != nil
}

func (p *Transaction) IsSetMerchantID() bool {
	return p.MerchantID != nil
}

func (p *Transaction) IsSetBankMid() bool {
	return p.BankMid != nil
}

func (p *Transaction) IsSetGrossAmount() bool {
	return p.GrossAmount != nil
}

func (p *Transaction) IsSetCustomerName() bool {
	return p.CustomerName != nil
}

func (p *Transaction) IsSetCustomerEmail() bool {
	return p.CustomerEmail != nil
}

func (p *Transaction) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Transaction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Transaction) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Transaction) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TransactionTime = &v
	}
	return nil
}

func (p *Transaction) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MerchantID = &v
	}
	return nil
}

func (p *Transaction) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.BankMid = &v
	}
	return nil
}

func (p *Transaction) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.GrossAmount = &v
	}
	return nil
}

func (p *Transaction) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CustomerName = &v
	}
	return nil
}

func (p *Transaction) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CustomerEmail = &v
	}
	return nil
}

func (p *Transaction) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *Transaction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Transaction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Transaction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Transaction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransactionTime() {
		if err := oprot.WriteFieldBegin("transaction_time", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transaction_time: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TransactionTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.transaction_time (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transaction_time: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMerchantID() {
		if err := oprot.WriteFieldBegin("merchant_id", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:merchant_id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MerchantID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.merchant_id (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:merchant_id: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBankMid() {
		if err := oprot.WriteFieldBegin("bank_mid", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bank_mid: ", p), err)
		}
		if err := oprot.WriteString(string(*p.BankMid)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bank_mid (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bank_mid: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGrossAmount() {
		if err := oprot.WriteFieldBegin("gross_amount", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gross_amount: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.GrossAmount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.gross_amount (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gross_amount: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomerName() {
		if err := oprot.WriteFieldBegin("customer_name", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:customer_name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CustomerName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.customer_name (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:customer_name: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomerEmail() {
		if err := oprot.WriteFieldBegin("customer_email", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:customer_email: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CustomerEmail)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.customer_email (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:customer_email: ", p), err)
		}
	}
	return err
}

func (p *Transaction) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err)
		}
	}
	return err
}

func (p *Transaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Transaction(%+v)", *p)
}

// Attributes:
//  - Reason
type MerchantNotFound struct {
	Reason string `thrift:"reason,1" json:"reason"`
}

func NewMerchantNotFound() *MerchantNotFound {
	return &MerchantNotFound{}
}

func (p *MerchantNotFound) GetReason() string {
	return p.Reason
}
func (p *MerchantNotFound) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MerchantNotFound) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *MerchantNotFound) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MerchantNotFound"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MerchantNotFound) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reason: ", p), err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reason: ", p), err)
	}
	return err
}

func (p *MerchantNotFound) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantNotFound(%+v)", *p)
}

func (p *MerchantNotFound) Error() string {
	return p.String()
}
